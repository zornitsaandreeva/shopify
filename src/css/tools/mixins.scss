/**
 * Mixins
 */

@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }

  // sass-lint:disable
  *zoom: 1;
}

/*============================================================================
  Prefix mixin for generating vendor prefixes.
  Based on https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/addons/_prefixer.scss

  Usage:
    // Input:
    .element {
      @include prefix(transform, scale(1), ms webkit spec);
    }

    // Output:
    .element {
      -ms-transform: scale(1);
      -webkit-transform: scale(1);
      transform: scale(1);
    }
==============================================================================*/
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      -webkit-#{$property}: $value;
    } @else if $prefix == moz {
      -moz-#{$property}: $value;
    } @else if $prefix == ms {
      -ms-#{$property}: $value;
    } @else if $prefix == o {
      -o-#{$property}: $value;
    } @else if $prefix == spec {
      #{$property}: $value;
    } @else {
      @warn 'Unrecognized prefix: #{$prefix}';
    }
  }
}

/*================ Media Query Mixin ================*/
@mixin media-query($media-query) {
  $breakpoint-found: false;

  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $media-query == $name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }
  }

  @if $breakpoint-found == false {
    @warn 'Breakpoint "#{$media-query}" does not exist';
  }
}

/*================ Responsive Show/Hide Helper ================*/
@mixin responsive-display-helper($breakpoint: '') {
  // sass-lint:disable no-important
  .#{$breakpoint}show {
    display: block !important;
  }

  .#{$breakpoint}hide {
    display: none !important;
  }
}


/*================ Responsive Text Alignment Helper ================*/
@mixin responsive-text-align-helper($breakpoint: '') {
  // sass-lint:disable no-important
  .#{$breakpoint}text-left {
    text-align: left !important;
  }

  .#{$breakpoint}text-right {
    text-align: right !important;
  }

  .#{$breakpoint}text-center {
    text-align: center !important;
  }
}

@mixin visually-hidden() {
  // sass-lint:disable no-important
  position: absolute !important;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

@mixin visually-shown($position: inherit) {
  // sass-lint:disable no-important
  position: $position !important;
  overflow: auto;
  clip: auto;
  width: auto;
  height: auto;
  margin: 0;
}


/*================ REM Function https://github.com/pierreburel/sass-rem MIT License ================*/
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
  @if $separator == "comma" or $separator == "space" {
    @return append($list, null, $separator);
  }

  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline + 0px, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / $rem-baseline + 0rem, $separator);
    } @else if type-of($value) == "list" {
      $value-separator: rem-separator($value);
      $value: rem-convert($to, $value...);
      $value: rem-separator($value, $value-separator);
      $result: append($result, $value, $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

@mixin sidebar-close {
  position: absolute;
  top: 50%;
  right: 10px;
  width: 30px;
  height: 30px;
  padding: 5px;
  color: inherit;
  font-size: 0;
  text-decoration: none;
  transform: translate3d(0, -50%, 0);
  transition: color 0.3s ease;

  .icon {
    display: block;
    fill: currentColor;
    transition: transform 0.3s;
    pointer-events: none;
  }
  @media (hover: hover) {
    &:hover { color: var(--link-hover); }
    &:hover .icon { transform: rotate(90deg); }
  }
}

@mixin scrollbar-on-hover {
  // Here is the magic that hides up the scrollbar
  mask-image: linear-gradient(to top, transparent, black),
    linear-gradient(to left, transparent var(--scrollbar-width), black var(--scrollbar-width));
  mask-size: 100% 20000px;
  mask-position: left bottom;
  -webkit-mask-image: linear-gradient(to top, transparent, black),
    linear-gradient(to left, transparent var(--scrollbar-width), black var(--scrollbar-width));
  -webkit-mask-size: 100% 20000px;
  -webkit-mask-position: left bottom;
  transition: mask-position 0.3s, -webkit-mask-position 0.3s;

  // Show up the scrollbar on hover
  &:hover { -webkit-mask-position: left top; }
}

@mixin horizontal-scrollbar-on-hover {
  // Here is the magic that hides up the scrollbar
  mask-image: linear-gradient(to right, transparent, black),
    linear-gradient(to top, transparent var(--scrollbar-width), black var(--scrollbar-width));
  mask-size: 20000px 100%;
  mask-position: left bottom;
  -webkit-mask-image: linear-gradient(to right, transparent, black),
    linear-gradient(to top, transparent var(--scrollbar-width), black var(--scrollbar-width));
  -webkit-mask-size: 20000px 100%;
  -webkit-mask-position: left bottom;
  transition: mask-position 0.3s, -webkit-mask-position 0.3s;

  // Show up the scrollbar on hover
  &:hover { -webkit-mask-position: top; }
}

@mixin hide-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none; /* for Internet Explorer, Edge */
  &::-webkit-scrollbar {
    display: none; /* for Chrome, Safari, and Opera */
  }
}

@mixin btn-added {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 14px;
  height: 8px;
  border-left: 1px solid var(--btn-text);
  border-bottom: 1px solid var(--btn-text);
  margin-top: -2px;
  transform: translate(-50%, -50%) rotate(-45deg);
  opacity: 0;
}

@mixin animate-underline-from-center {
  background: linear-gradient(to right, currentColor, currentColor);
  background-size: 100% 1px;
  background-position: 50% 86%;
  background-repeat: no-repeat;
  transition: color 0.25s ease-in, background-size 0.25s ease-in;

  @media (hover: hover) {
    &:hover { background-size: 0% 1px; }
  }
}

@mixin animate-underline-from-center-on-hover {
  padding: 0 0 5px;
  background: linear-gradient(to right, currentColor, currentColor);
  background-size: 0% 1px;
  background-position: 50% 86%;
  background-repeat: no-repeat;
  transition: color 0.25s ease-in, background-size 0.25s ease-in;

  @media (hover: hover) {
    &:hover { background-size: 100% 1px; }
  }
}